{"version":3,"file":"232.min.js","mappings":"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","sources":["webpack:///./src/presentation/components/result/Result.module.scss?c4bd","webpack:///./src/domain/entity/stuctures/Enums.tsx","webpack:///./src/presentation/utils/image/findClosestColor.tsx","webpack:///./src/presentation/utils/image/rgbToHex.tsx","webpack:///./src/presentation/utils/image/calculateColors.tsx","webpack:///./src/domain/entity/models/Blueprint.tsx","webpack:///./src/domain/entity/models/Blueprint_Entity.tsx","webpack:///./src/domain/entity/models/Blueprint_Icon.tsx","webpack:///./src/presentation/components/Generate.tsx","webpack:///./src/presentation/components/result/Result.tsx","webpack:///./src/presentation/utils/convertors/Encoder.ts","webpack:///./src/presentation/utils/handlers/clickCopyHandler.tsx","webpack:///./src/presentation/components/result/Result.module.scss"],"sourcesContent":["\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./Result.module.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./Result.module.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","export enum versions {\r\n  latest = 281479276527617,\r\n}\r\nexport enum item_types {\r\n  Fluid = \"fluid\",\r\n  Item = \"item\",\r\n  Virtual = \"virtual\",\r\n  Tile = \"tile\",\r\n  Recipe = \"recipe\",\r\n}\r\n\r\nexport enum entity_names {\r\n  constant_combinator = \"constant-combinator\",\r\n  substation = \"substation\",\r\n  arithmetic_combinator = \"arithmetic-combinator\",\r\n  small_lamp = \"small-lamp\",\r\n  medium_electric_pole = \"medium-electric-pole\",\r\n}\r\n\r\nexport enum arithmetic_operations {\r\n  addition = \"+\",\r\n  subtraction = \"−\",\r\n  multiplication = \"*\",\r\n  division = \"/\",\r\n  modulo = \"%\",\r\n  exponentiation = \"^\",\r\n  left_bit_shift = \"<<\",\r\n  right_bit_shift = \">>\",\r\n  and = \"AND\",\r\n  or = \"OR\",\r\n  xor = \"XOR\",\r\n}\r\n//signals enum\r\n\r\nexport const signals = {\r\n  signal_red: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-red\",\r\n  },\r\n  signal_green: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-green\",\r\n  },\r\n  signal_blue: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-blue\",\r\n  },\r\n  signal_yellow: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-yellow\",\r\n  },\r\n  signal_pink: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-pink\",\r\n  },\r\n  signal_cyan: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-cyan\",\r\n  },\r\n  signal_white: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-white\",\r\n  },\r\n  signal_black: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-black\",\r\n  },\r\n  signal_0: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-0\",\r\n  },\r\n  signal_1: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-1\",\r\n  },\r\n  signal_2: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-2\",\r\n  },\r\n  signal_3: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-3\",\r\n  },\r\n  signal_4: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-4\",\r\n  },\r\n  signal_5: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-5\",\r\n  },\r\n  signal_6: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-6\",\r\n  },\r\n  signal_7: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-7\",\r\n  },\r\n  signal_8: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-8\",\r\n  },\r\n  signal_9: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-9\",\r\n  },\r\n  signal_each: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-each\",\r\n  },\r\n  signal_a: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-A\",\r\n  },\r\n  signal_b: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-B\",\r\n  },\r\n  signal_c: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-C\",\r\n  },\r\n  signal_d: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-D\",\r\n  },\r\n  signal_e: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-E\",\r\n  },\r\n  signal_f: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-F\",\r\n  },\r\n  signal_g: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-G\",\r\n  },\r\n  signal_h: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-H\",\r\n  },\r\n  signal_i: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-I\",\r\n  },\r\n  signal_j: {\r\n    type: item_types.Virtual,\r\n    name: \"signal-J\",\r\n  },\r\n};\r\n\r\nexport const color_priority = [\r\n  signals.signal_white,\r\n  signals.signal_cyan,\r\n  signals.signal_pink,\r\n  signals.signal_yellow,\r\n  signals.signal_blue,\r\n  signals.signal_green,\r\n  signals.signal_red,\r\n];\r\n\r\nexport const signal_priority = [\r\n  signals.signal_0,\r\n  signals.signal_1,\r\n  signals.signal_2,\r\n  signals.signal_3,\r\n  signals.signal_4,\r\n  signals.signal_5,\r\n  signals.signal_6,\r\n  signals.signal_7,\r\n  signals.signal_8,\r\n  signals.signal_9,\r\n  signals.signal_a,\r\n  signals.signal_b,\r\n  signals.signal_c,\r\n  signals.signal_d,\r\n  signals.signal_e,\r\n  signals.signal_f,\r\n  signals.signal_g,\r\n  signals.signal_h,\r\n  signals.signal_i,\r\n  signals.signal_j,\r\n];\r\n","/**\r\nRGB = (R\\*65536)+(G\\*256)+B , (when R is RED, G is GREEN and B is BLUE)\r\nCalculation examples\r\nWhite RGB Color\r\nWhite RGB code = 255\\*65536+255\\*256+255 = #FFFFFF\r\n\r\nBlue RGB Color\r\nBlue RGB code = 0\\*65536+0\\*256+255 = #0000FF\r\n\r\nRed RGB Color\r\nRed RGB code = 255\\*65536+0\\*256+0 = #FF0000\r\n*/\r\nexport default function findClosestColor(\r\n  colorarr: string[],\r\n  hexstr: string\r\n): string {\r\n  var min = 0xffffff;\r\n  var best, current, i;\r\n  for (i = 0; i < colorarr.length; i++) {\r\n    current = dist(colorarr[i], hexstr);\r\n    if (current < min) {\r\n      min = current;\r\n      best = colorarr[i];\r\n    }\r\n  }\r\n  return best;\r\n}\r\n\r\nfunction dist(hexstring: string, t: string): number {\r\n  if (!hexstring.length || !t.length) return 0;\r\n  return (\r\n    dist(hexstring.slice(2), t.slice(2)) +\r\n    Math.abs(parseInt(hexstring.slice(0, 2), 16) - parseInt(t.slice(0, 2), 16))\r\n  );\r\n}\r\n","function componentToHex(c: number): string {\r\n  var hex = c.toString(16);\r\n  return hex.length == 1 ? \"0\" + hex : hex;\r\n}\r\n\r\n/**\r\n * Converts RGB values to hex string\r\n * @param red \r\n * @param green \r\n * @param blue \r\n * @returns \r\n */\r\nexport default function rgbToHex(red: number, green: number, blue: number): string {\r\n  return componentToHex(red) + componentToHex(green) + componentToHex(blue);\r\n}\r\n","import {\r\n  signals,\r\n  color_priority,\r\n} from \"../../../domain/entity/stuctures/Enums\";\r\nimport { TBlueprint_Signal } from \"../../../domain/entity/stuctures/TBlueprint_Signal\";\r\nimport findClosestColor from \"./findClosestColor\";\r\nimport rgbToHex from \"./rgbToHex\";\r\n\r\n/**\r\n *\r\n * @param canvas\r\n */\r\nexport default function calculateColors(\r\n  canvas: HTMLCanvasElement\r\n): number[][][] {\r\n  var context = canvas.getContext(\"2d\", { willReadFrequently: true });\r\n\r\n  var colors: { [color_hex: string]: TBlueprint_Signal } = {\r\n    ff0000: signals.signal_red,\r\n    \"0000FF\": signals.signal_blue,\r\n    FFFFFF: signals.signal_white,\r\n    FFFF00: signals.signal_yellow,\r\n    \"008000\": signals.signal_green,\r\n    ffc0cb: signals.signal_pink,\r\n    \"30d5c8\": signals.signal_cyan,\r\n    \"000000\": signals.signal_black,\r\n  };\r\n\r\n  // convert the `colors`-object to an array\r\n  var colorsArr: string[] = [];\r\n  for (var key in colors) {\r\n    colorsArr.push(key);\r\n  }\r\n\r\n  var color_indexes: number[][] = [];\r\n  let part20: number[] = [];\r\n  let result: number[][][] = [];\r\n  let step = Math.ceil(canvas.height / 20);\r\n  for (let i = 0; i < canvas.width; i++) {\r\n    color_indexes = [];\r\n    for (let count = 0; count < step; count++) {\r\n      part20 = [];\r\n      for (let j = 0; j < canvas.height; j += step) {\r\n        //i width j height\r\n        let data = context.getImageData(i, j, 1, 1).data;\r\n        let hex = rgbToHex(data[0], data[1], data[2]);\r\n        hex = hex.length < 6 ? hex.replace(/(.)/g, \"$1$1\") : hex;\r\n\r\n        var match = findClosestColor(colorsArr, hex);\r\n        part20.push(-(color_priority.indexOf(colors[match]) + 1));\r\n      }\r\n      color_indexes.push(part20);\r\n    }\r\n    result.push(color_indexes);\r\n  }\r\n  return result;\r\n}\r\n","import { versions } from \"../stuctures/Enums\";\r\nimport { Blueprint_Entity } from \"./Blueprint_Entity\";\r\nimport { Blueprint_Icon } from \"./Blueprint_Icon\";\r\n\r\nexport class Blueprint {\r\n  icons: Blueprint_Icon[];\r\n  entities: Blueprint_Entity[];\r\n  item: string;\r\n  version: versions;\r\n\r\n  constructor(\r\n    icons: Blueprint_Icon[],\r\n    entities: Blueprint_Entity[],\r\n    version: versions\r\n  ) {\r\n    this.icons = icons;\r\n    this.entities = entities;\r\n    this.item = \"blueprint\";\r\n    this.version = version;\r\n  }\r\n}\r\n","import { entity_names } from \"../stuctures/Enums\";\r\nimport { TBlueprint_Entity_Connections } from \"../stuctures/TBlueprint_Entity_Connections\";\r\n\r\nexport class Blueprint_Entity{\r\n  entity_number: number;\r\n  name: entity_names;\r\n  position: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  connections?: TBlueprint_Entity_Connections;\r\n  direction?:number\r\n  control_behavior?:{}\r\n  neighbours?: number[]\r\n\r\n  constructor(\r\n    entity_number: number,\r\n    name: entity_names,\r\n    positionX: number,\r\n    positionY: number,\r\n    connections?: TBlueprint_Entity_Connections|undefined,\r\n    direction?:number|undefined,\r\n    control_behavior?:{}|undefined,\r\n    neighbours?:number[]|undefined\r\n  ) {\r\n    this.entity_number = entity_number;\r\n    this.name = name;\r\n    this.position = { x: positionX, y: positionY };\r\n    this.connections = connections;\r\n    this.direction=direction\r\n    this.control_behavior=control_behavior\r\n    this.neighbours=neighbours\r\n  }\r\n}\r\n","import { TBlueprint_Signal } from \"../stuctures/TBlueprint_Signal\";\r\n\r\nexport class Blueprint_Icon {\r\n  signal: TBlueprint_Signal;\r\n  index: number;\r\n\r\n  constructor(signal: TBlueprint_Signal, index: number) {\r\n    this.signal = signal;\r\n    this.index = index;\r\n  }\r\n}\r\n","import { Blueprint } from \"../../domain/entity/models/Blueprint\";\r\nimport { Blueprint_Entity } from \"../../domain/entity/models/Blueprint_Entity\";\r\nimport { Blueprint_Icon } from \"../../domain/entity/models/Blueprint_Icon\";\r\nimport {\r\n  entity_names,\r\n  signals,\r\n  signal_priority,\r\n  versions,\r\n} from \"../../domain/entity/stuctures/Enums\";\r\n\r\nexport default (wmax: number, hmax: number, color_indexes: number[][][]) => {\r\n  //#region validations\r\n  if (wmax < 5) {\r\n    throw \"min width is 5\";\r\n  }\r\n  if (hmax < 5) {\r\n    throw \"min height is 5\";\r\n  }\r\n  if (hmax > 100) {\r\n    throw \"max height is 100\";\r\n  }\r\n  if (wmax != color_indexes.length) {\r\n    throw \"width dont match with array's length\";\r\n  }\r\n  //#endregion\r\n  //#region substation array\r\n  var substation_counter = 4;\r\n  var substation_cordinates_w = [4];\r\n  var substation_cordinates_h = [4];\r\n  while (substation_counter + 9 < Math.ceil(wmax / 9) * 9) {\r\n    substation_cordinates_w.push(substation_counter + 9);\r\n    substation_counter += 9;\r\n  }\r\n  substation_counter = 4;\r\n  while (substation_counter + 9 < Math.ceil(hmax / 9) * 9) {\r\n    substation_cordinates_h.push(substation_counter + 9);\r\n    substation_counter += 9;\r\n  }\r\n  //#endregion\r\n\r\n  //#region variables\r\n  var entities: Blueprint_Entity[] = [];\r\n  var current_height = 0;\r\n  var current_width = 0;\r\n  //#endregion\r\n  //#region const cambinators\r\n  //color combinator\r\n  entities.push(\r\n    new Blueprint_Entity(\r\n      100000000, //uint64 max\r\n      entity_names.constant_combinator,\r\n      -1,\r\n      -1,\r\n      {\r\n        \"1\": { red: [{ entity_id: 100000000 - 1 }] },\r\n      },\r\n      undefined,\r\n      {\r\n        filters: [\r\n          {\r\n            signal: signals.signal_red,\r\n            count: -6,\r\n            index: 1,\r\n          },\r\n          {\r\n            signal: signals.signal_green,\r\n            count: -5,\r\n            index: 2,\r\n          },\r\n          {\r\n            signal: signals.signal_blue,\r\n            count: -4,\r\n            index: 3,\r\n          },\r\n          {\r\n            signal: signals.signal_yellow,\r\n            count: -3,\r\n            index: 4,\r\n          },\r\n          {\r\n            signal: signals.signal_pink,\r\n            count: -2,\r\n            index: 5,\r\n          },\r\n          {\r\n            signal: signals.signal_cyan,\r\n            count: -1,\r\n            index: 6,\r\n          },\r\n          {\r\n            signal: signals.signal_white,\r\n            count: 1,\r\n            index: 7,\r\n          },\r\n        ],\r\n      }\r\n    )\r\n  );\r\n  while (current_width < wmax) {\r\n    let combinator_filter = [];\r\n    for (let j = 0; j < color_indexes[current_width].length; j++) {\r\n      combinator_filter.push({\r\n        signal: signal_priority[j],\r\n        count: color_indexes[current_width][j],\r\n        index: j + 1,\r\n      });\r\n    }\r\n    for (let i = 0; i < color_indexes[current_width].length; i++) {\r\n      let combinator_filter = [];\r\n      for (let j = 0; j < color_indexes[current_width][i].length; j++) {\r\n        combinator_filter.push({\r\n          signal: signal_priority[j],\r\n          count: color_indexes[current_width][i][j],\r\n          index: j + 1,\r\n        });\r\n      }\r\n      entities.push(\r\n        new Blueprint_Entity(\r\n          (wmax * hmax * 3 + current_width) * (i + 1),\r\n          entity_names.constant_combinator,\r\n          current_width * 2 + 1,\r\n          -1 - 5 + i,\r\n          {\r\n            \"1\": {\r\n              green: [\r\n                { entity_id: current_width * 3 + i * wmax * 3, circuit_id: 1 },\r\n              ],\r\n            },\r\n            //current_height * wmax * 3 + current_width * 3,\r\n            // \"2\": {\r\n            //   red: [\r\n            //     { entity_id: current_width * 3, circuit_id: 1 },\r\n            //     current_width + 1 != wmax\r\n            //       ? { entity_id: wmax * hmax * 3 + current_width + 1 }\r\n            //       : undefined,\r\n            //   ],\r\n            // },\r\n          },\r\n          undefined,\r\n          {\r\n            filters: combinator_filter,\r\n          }\r\n        )\r\n      );\r\n    }\r\n\r\n    entities.push(\r\n      new Blueprint_Entity(\r\n        100000000 - (current_width + 1),\r\n        entity_names.medium_electric_pole,\r\n        current_width * 2,\r\n        -1,\r\n        {\r\n          \"1\": {\r\n            red: [\r\n              { entity_id: current_width * 3, circuit_id: 1 }, //1st above\r\n              current_width + 1 != wmax //next electric pole\r\n                ? { entity_id: 100000000 - (current_width + 2) }\r\n                : undefined,\r\n            ],\r\n          },\r\n        }\r\n      )\r\n    );\r\n    current_width++;\r\n  }\r\n  current_width = 0;\r\n  //#endregion\r\n  while (current_height < hmax) {\r\n    while (current_width < wmax) {\r\n      if (\r\n        substation_cordinates_h.includes(current_height) &&\r\n        substation_cordinates_w.includes(current_width)\r\n      ) {\r\n        entities.push(\r\n          new Blueprint_Entity(\r\n            current_height * wmax * 3 + current_width * 3,\r\n            entity_names.substation,\r\n            current_width * 2 + 0.5,\r\n            current_height * 2 + 0.5,\r\n            {\r\n              1: {\r\n                green: [\r\n                  {\r\n                    entity_id:\r\n                      (current_height + color_indexes[0].length - 1) *\r\n                        wmax *\r\n                        3 +\r\n                      current_width * 3 +\r\n                      wmax * 3,\r\n                    circuit_id: 1,\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n            undefined,\r\n            undefined,\r\n            [\r\n              substation_cordinates_w\r\n                .slice(0, substation_cordinates_w.length - 1)\r\n                .includes(current_width + 9) //next\r\n                ? current_height * wmax * 3 + (current_width + 9) * 3\r\n                : substation_cordinates_w.includes(current_width + 9)\r\n                ? wmax * hmax * 3 + wmax + (current_width + 9) * current_height\r\n                : undefined,\r\n              substation_cordinates_h\r\n                .slice(0, substation_cordinates_h.length - 1)\r\n                .includes(current_height + 9) //below\r\n                ? (current_height + 9) * wmax * 3 + current_width * 3\r\n                : substation_cordinates_h.includes(current_height + 9)\r\n                ? wmax * hmax * 3 + wmax + (current_height + 9) * current_width\r\n                : undefined,\r\n            ]\r\n          )\r\n        );\r\n        current_width += 1;\r\n        continue;\r\n      }\r\n      entities.push(\r\n        new Blueprint_Entity(\r\n          current_height * wmax * 3 + current_width * 3,\r\n          entity_names.arithmetic_combinator,\r\n          current_width * 2 + 0.5,\r\n          current_height * 2,\r\n          {\r\n            \"1\": {\r\n              green: [\r\n                //   current_height - color_indexes[0].length >= 0 //Prev => check if there is entity above current entity\r\n                //     ? {\r\n                //         entity_id:\r\n                //           (current_height - color_indexes[0].length-1) * wmax * 3 +\r\n                //           current_width * 3 -\r\n                //           wmax * 3,\r\n                //         circuit_id: 1,\r\n                //       }\r\n                // : {\r\n                //     entity_id:\r\n                //       (wmax * hmax * 3 + current_width) *\r\n                //       -1 *\r\n                //       (current_height - color_indexes[0].length),\r\n                //   }, //const combinator id\r\n                // :undefined,\r\n                current_height + color_indexes[0].length != hmax //Next => check is there is entity under current entity\r\n                  ? {\r\n                      entity_id:\r\n                        (current_height + color_indexes[0].length - 1) *\r\n                          wmax *\r\n                          3 +\r\n                        current_width * 3 +\r\n                        wmax * 3,\r\n                      circuit_id: 1,\r\n                    }\r\n                  : undefined,\r\n              ],\r\n              red: [\r\n                current_height + 1 != hmax //Next => check is there is entity under current entity\r\n                  ? {\r\n                      entity_id:\r\n                        current_height * wmax * 3 +\r\n                        current_width * 3 +\r\n                        wmax * 3,\r\n                      circuit_id: 1,\r\n                    }\r\n                  : undefined,\r\n                current_height - 1 >= 0 //Prev => check if there is entity above current entity\r\n                  ? {\r\n                      entity_id:\r\n                        current_height * wmax * 3 +\r\n                        current_width * 3 -\r\n                        wmax * 3,\r\n                      circuit_id: 1,\r\n                    }\r\n                  : undefined,\r\n              ],\r\n            },\r\n            \"2\": {\r\n              red: [\r\n                {\r\n                  entity_id: current_height * wmax * 3 + current_width * 3 + 1,\r\n                },\r\n              ],\r\n            },\r\n          },\r\n          6,\r\n          {\r\n            arithmetic_conditions: {\r\n              first_signal: signals.signal_each,\r\n              second_signal:\r\n                signal_priority[\r\n                  Math.floor(current_height / color_indexes[0].length)\r\n                ],\r\n              operation: \"-\",\r\n              output_signal: signals.signal_each,\r\n            },\r\n          }\r\n        )\r\n      );\r\n      entities.push(\r\n        new Blueprint_Entity(\r\n          current_height * wmax * 3 + current_width * 3 + 1,\r\n          entity_names.small_lamp,\r\n          current_width * 2,\r\n          current_height * 2 + 1,\r\n          {\r\n            \"1\": {\r\n              red: [\r\n                {\r\n                  entity_id: current_height * wmax * 3 + current_width * 3,\r\n                  circuit_id: 2,\r\n                },\r\n                {\r\n                  entity_id: current_height * wmax * 3 + current_width * 3 + 2,\r\n                },\r\n              ],\r\n            },\r\n          },\r\n          undefined,\r\n          {\r\n            circuit_condition: {\r\n              first_signal: signals.signal_white,\r\n              constant: 1,\r\n              comparator: \">\",\r\n            },\r\n            use_colors: true,\r\n          }\r\n        )\r\n      );\r\n      entities.push(\r\n        new Blueprint_Entity(\r\n          current_height * wmax * 3 + current_width * 3 + 2,\r\n          entity_names.small_lamp,\r\n          current_width * 2 + 1,\r\n          current_height * 2 + 1,\r\n          {\r\n            \"1\": {\r\n              red: [\r\n                {\r\n                  entity_id: current_height * wmax * 3 + current_width * 3 + 1,\r\n                },\r\n              ],\r\n            },\r\n          },\r\n          undefined,\r\n          {\r\n            circuit_condition: {\r\n              first_signal: signals.signal_white,\r\n              constant: 1,\r\n              comparator: \">\",\r\n            },\r\n            use_colors: true,\r\n          }\r\n        )\r\n      );\r\n      current_width += 1;\r\n    }\r\n    //addding substation if that not affected by loop\r\n    if (\r\n      current_width <=\r\n        substation_cordinates_w[substation_cordinates_w.length - 1] &&\r\n      substation_cordinates_h.includes(current_height)\r\n    ) {\r\n      entities.push(\r\n        new Blueprint_Entity(\r\n          wmax * hmax * 3 +\r\n            wmax +\r\n            substation_cordinates_w[substation_cordinates_w.length - 1] *\r\n              current_height,\r\n\r\n          entity_names.substation,\r\n          substation_cordinates_w[substation_cordinates_w.length - 1] * 2 + 0.5,\r\n          current_height * 2 + 0.5,\r\n          undefined,\r\n          undefined,\r\n          undefined,\r\n          [\r\n            substation_cordinates_h.includes(current_height + 9)\r\n              ? wmax * hmax * 3 +\r\n                wmax +\r\n                (current_height + 9) *\r\n                  substation_cordinates_w[substation_cordinates_w.length - 1]\r\n              : undefined,\r\n          ]\r\n        )\r\n      );\r\n    }\r\n    current_width = 0;\r\n    current_height += 1;\r\n  }\r\n  current_width = 0;\r\n  //substation not affected by loop by height\r\n  if (\r\n    current_height <=\r\n    substation_cordinates_h[substation_cordinates_h.length - 1]\r\n  ) {\r\n    while (current_width < wmax) {\r\n      if (substation_cordinates_w.includes(current_width)) {\r\n        entities.push(\r\n          new Blueprint_Entity(\r\n            wmax * hmax * 3 +\r\n              wmax +\r\n              substation_cordinates_h[substation_cordinates_h.length - 1] *\r\n                current_width,\r\n            entity_names.substation,\r\n            current_width * 2 + 0.5,\r\n            substation_cordinates_h[substation_cordinates_h.length - 1] * 2 +\r\n              0.5,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            [\r\n              substation_cordinates_w.includes(current_width + 9)\r\n                ? wmax * hmax * 3 +\r\n                  wmax +\r\n                  (current_width + 9) *\r\n                    substation_cordinates_h[substation_cordinates_h.length - 1]\r\n                : undefined,\r\n            ]\r\n          )\r\n        );\r\n      }\r\n      current_width++;\r\n    }\r\n  }\r\n\r\n  var result: Blueprint = new Blueprint(\r\n    [new Blueprint_Icon(signals.signal_white, 1)],\r\n    entities,\r\n    versions.latest\r\n  );\r\n  return result;\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Result.module.scss\";\r\nimport calculateColors from \"../../utils/image/calculateColors\";\r\nimport Generate from \"../Generate\";\r\nimport Encode_Blueprint from \"../../utils/convertors/Encoder\";\r\nimport clickCopyHandler from \"../../utils/handlers/clickCopyHandler\";\r\ntype Props = { resultCanvas: HTMLCanvasElement };\r\n\r\nconst Result = ({ resultCanvas }: Props) => {\r\n  return (\r\n    <div className={styles[\"result--container\"]} >\r\n      <p className={styles[\"result--help\"]}>\r\n        Click on blueprint string to copy\r\n      </p>\r\n      <p className={styles[\"result\"]} onClick={clickCopyHandler}>\r\n        {Encode_Blueprint({\r\n          blueprint: Generate(\r\n            resultCanvas.width,\r\n            resultCanvas.height,\r\n            calculateColors(resultCanvas)\r\n          ),\r\n        })}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import { deflate } from \"pako\";\r\nimport { Blueprint } from \"../../../domain/entity/models/Blueprint\";\r\nimport { Buffer } from \"buffer\";\r\n\r\n/**\r\n * encodes given json to factorio base64 blueprint string\r\n * @param myjson blueprint json\r\n */\r\nconst Encode_Blueprint = (myjson: { blueprint: Blueprint }): string => {\r\n  var blueprint = JSON.stringify(myjson)\r\n    .replace(/(null)|(,null)/g, \"\")\r\n    .replace(/(\\[,)/g, \"[\");\r\n  var encoded = deflate(blueprint, { level: 9 });\r\n  var based = Buffer.from(encoded).toString(\"base64\");\r\n  return 0 + based;\r\n};\r\nexport default Encode_Blueprint\r\n","export default function clickCopyHandler(\r\n  e: React.MouseEvent<any, MouseEvent>\r\n): void {\r\n  var text = e.target as HTMLElement;\r\n  navigator.clipboard.writeText(text.innerText).then(\r\n    () => {\r\n      console.log(\"success\");\r\n    },\r\n    (e) => {\r\n      console.log(e);\r\n    }\r\n  );\r\n}\r\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".UVvVC09WzHp3ePcboyn8{word-break:break-all;max-height:240px;overflow:auto}.Zh7u2EWtVSvwRpbPyXbu{color:#fff}.vBkmBBSjaxJKHm0B2Wpj{color:#fff;font-size:46px}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/components/result/Result.module.scss\"],\"names\":[],\"mappings\":\"AAAA,sBACI,oBAAA,CACA,gBAAA,CACA,aAAA,CACA,sBACI,UAAA,CAEJ,sBACI,UAAA,CACA,cAAA\",\"sourcesContent\":[\".result{\\r\\n    word-break: break-all;\\r\\n    max-height: 240px;\\r\\n    overflow: auto  ;\\r\\n    &--container{\\r\\n        color: white;\\r\\n    }\\r\\n    &--help{\\r\\n        color: white;\\r\\n        font-size: 46px;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"result\": \"UVvVC09WzHp3ePcboyn8\",\n\t\"result--container\": \"Zh7u2EWtVSvwRpbPyXbu\",\n\t\"result--help\": \"vBkmBBSjaxJKHm0B2Wpj\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","undefined","versions","item_types","entity_names","arithmetic_operations","signals","signal_red","type","Virtual","name","signal_green","signal_blue","signal_yellow","signal_pink","signal_cyan","signal_white","signal_black","signal_0","signal_1","signal_2","signal_3","signal_4","signal_5","signal_6","signal_7","signal_8","signal_9","signal_each","signal_a","signal_b","signal_c","signal_d","signal_e","signal_f","signal_g","signal_h","signal_i","signal_j","color_priority","signal_priority","findClosestColor","colorarr","hexstr","best","current","i","min","length","dist","hexstring","t","slice","Math","abs","parseInt","componentToHex","c","hex","toString","calculateColors","canvas","context","getContext","willReadFrequently","colors","ff0000","FFFFFF","FFFF00","ffc0cb","colorsArr","key","push","color_indexes","part20","result","step","ceil","height","width","count","j","data","getImageData","red","green","blue","replace","match","indexOf","Blueprint","constructor","icons","entities","version","this","item","Blueprint_Entity","entity_number","positionX","positionY","connections","direction","control_behavior","neighbours","position","x","y","Blueprint_Icon","signal","index","wmax","hmax","substation_counter","substation_cordinates_w","substation_cordinates_h","current_height","current_width","constant_combinator","entity_id","filters","combinator_filter","circuit_id","medium_electric_pole","includes","substation","arithmetic_combinator","arithmetic_conditions","first_signal","second_signal","floor","operation","output_signal","small_lamp","circuit_condition","constant","comparator","use_colors","latest","resultCanvas","className","styles","onClick","clickCopyHandler","Encode_Blueprint","blueprint","Generate","myjson","JSON","stringify","encoded","deflate","level","Buffer","e","text","target","navigator","clipboard","writeText","innerText","then","console","log","___CSS_LOADER_EXPORT___","module","id","locals"],"sourceRoot":""}