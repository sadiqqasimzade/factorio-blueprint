/*! For license information please see src_presentation_pages_music_converter_MusicConverterPage_tsx.min.js.LICENSE.txt */
"use strict";(self.webpackChunkfactorio_blueprint=self.webpackChunkfactorio_blueprint||[]).push([["src_presentation_pages_music_converter_MusicConverterPage_tsx"],{"./src/presentation/pages/music_converter/MusicConverterPage.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction getFrequencies(audioBuffer) {\n  const ctx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.length, audioBuffer.sampleRate);\n  const source = ctx.createBufferSource();\n  source.buffer = audioBuffer;\n  const analyser = ctx.createAnalyser();\n  analyser.fftSize = 1024;\n  source.connect(analyser);\n  analyser.connect(ctx.destination);\n  source.start(18, 0, 1);\n  ctx.startRendering();\n  return new Promise((resolve, reject) => {\n    ctx.oncomplete = event => {\n      const buffer = event.renderedBuffer;\n      const frequencyData = [];\n      for (let i = 0; i < buffer.length; i += 1 / buffer.duration) {\n        const time = buffer.duration * (i / buffer.length);\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(data);\n        console.log(i);\n        frequencyData.push([time, ...data]);\n      }\n      resolve(frequencyData);\n    };\n  });\n}\nfunction MusicConverterPage() {\n  const [audioFile, setAudioFile] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  const [frequencyData, setFrequencyData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (audioFile) {\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        const audioContext = new AudioContext();\n        audioContext.decodeAudioData(fileReader.result).then(audioBuffer => {\n          getFrequencies(audioBuffer).then(data => {\n            setFrequencyData(data);\n          });\n        });\n      };\n      fileReader.readAsArrayBuffer(audioFile);\n    }\n  }, [audioFile]);\n  const handleFileInputChange = event => {\n    const files = event.target.files;\n    if (files && files[0]) {\n      setAudioFile(files[0]);\n    }\n  };\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {\n    type: "file",\n    accept: "audio/*",\n    onChange: handleFileInputChange\n  }), frequencyData.map(([time, ...data], index) => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    style: {\n      color: \'white\',\n      fontSize: \'18px\'\n    },\n    key: index\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", null, time), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", null, data.slice(0, 14).join(", ")))));\n}\n/* harmony default export */ __webpack_exports__["default"] = (MusicConverterPage);\n\n//# sourceURL=webpack://factorio-blueprint/./src/presentation/pages/music_converter/MusicConverterPage.tsx?')}}]);