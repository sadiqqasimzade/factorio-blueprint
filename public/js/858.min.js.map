{"version":3,"file":"858.min.js","mappings":"gJAkFA,UA3CA,WACE,MAAOA,EAAWC,IAAgBC,EAAAA,EAAAA,UAAsB,OACjDC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAqB,IA4B/D,OA1BAG,EAAAA,EAAAA,YAAU,KACR,GAAIL,EAAW,CACb,MAAMM,EAAa,IAAIC,WACvBD,EAAWE,OAAS,MACG,IAAIC,cAEtBC,gBAAgBJ,EAAWK,QAC3BC,MAAMC,KA/CjB,SAAwBA,GACtB,MAAMC,EAAM,IAAIC,oBACdF,EAAYG,iBACZH,EAAYI,OACZJ,EAAYK,YAGRC,EAASL,EAAIM,qBACnBD,EAAOE,OAASR,EAEhB,MAAMS,EAAWR,EAAIS,iBASrB,OARAD,EAASE,QAAU,KAEnBL,EAAOM,QAAQH,GACfA,EAASG,QAAQX,EAAIY,aAErBP,EAAOQ,MAAM,GAAG,EAAE,GAElBb,EAAIc,iBACG,IAAIC,SAAQ,CAACC,EAASC,KAC3BjB,EAAIkB,WAAcC,IAChB,MAAMZ,EAASY,EAAMC,eACf/B,EAA4B,GAElC,IAAK,IAAIgC,EAAI,EAAGA,EAAId,EAAOJ,OAAQkB,GAAI,EAAEd,EAAOe,SAAW,CACzD,MAAMC,EAAOhB,EAAOe,UAAYD,EAAId,EAAOJ,QACrCqB,EAAO,IAAIC,WAAWjB,EAASkB,mBACrClB,EAASmB,qBAAqBH,GAC9BI,QAAQC,IAAIR,GACZhC,EAAcyC,KAAK,CAACP,KAASC,GAC/B,CAEAR,EAAQ3B,EAAc,CACvB,GAEL,EAaY0C,CAAehC,GAAaD,MAAM0B,IAChClC,EAAiBkC,EAAK,GACtB,GACF,EAENhC,EAAWwC,kBAAkB9C,EAC/B,IACC,CAACA,IAYF,2BACE,yBAAO+C,KAAK,OAAOC,OAAO,UAAUC,SAVtChB,IAEA,MAAMiB,EAAQjB,EAAMkB,OAAOD,MACvBA,GAASA,EAAM,IACjBjD,EAAaiD,EAAM,GACrB,IAMG/C,EAAciD,KAAI,EAAEf,KAASC,GAAOe,IACnC,uBAAKC,MAAO,CAACC,MAAM,QAAQC,SAAS,QAASC,IAAKJ,GAChD,2BAAMhB,GACN,2BAAMC,EAAKoB,MAAM,EAAE,IAAIC,KAAK,UAKtC,C","sources":["webpack:///./src/presentation/pages/music_converter/MusicConverterPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\ntype Props = {};\r\n\r\nfunction getFrequencies(audioBuffer: AudioBuffer): Promise<number[][]> {\r\n  const ctx = new OfflineAudioContext(\r\n    audioBuffer.numberOfChannels,\r\n    audioBuffer.length,\r\n    audioBuffer.sampleRate\r\n  );\r\n\r\n  const source = ctx.createBufferSource();\r\n  source.buffer = audioBuffer;\r\n\r\n  const analyser = ctx.createAnalyser();\r\n  analyser.fftSize = 1024;\r\n\r\n  source.connect(analyser);\r\n  analyser.connect(ctx.destination);\r\n\r\n  source.start(18,0,1);\r\n  \r\n  ctx.startRendering();\r\n  return new Promise((resolve, reject) => {\r\n    ctx.oncomplete = (event) => {\r\n      const buffer = event.renderedBuffer;\r\n      const frequencyData: number[][] = [];\r\n      \r\n      for (let i = 0; i < buffer.length; i+=(1/buffer.duration)) {\r\n        const time = buffer.duration * (i / buffer.length);\r\n        const data = new Uint8Array(analyser.frequencyBinCount);\r\n        analyser.getByteFrequencyData(data);\r\n        console.log(i)\r\n        frequencyData.push([time, ...data]);\r\n      }\r\n\r\n      resolve(frequencyData);\r\n    };\r\n  });\r\n}\r\nfunction MusicConverterPage() {\r\n  const [audioFile, setAudioFile] = useState<File | null>(null);\r\n  const [frequencyData, setFrequencyData] = useState<number[][]>([]);\r\n\r\n  useEffect(() => {\r\n    if (audioFile) {\r\n      const fileReader = new FileReader();\r\n      fileReader.onload = () => {\r\n        const audioContext = new AudioContext();\r\n        audioContext\r\n          .decodeAudioData(fileReader.result as ArrayBuffer)\r\n          .then((audioBuffer) => {\r\n            getFrequencies(audioBuffer).then((data) => {\r\n              setFrequencyData(data);\r\n            });\r\n          });\r\n      };\r\n      fileReader.readAsArrayBuffer(audioFile);\r\n    }\r\n  }, [audioFile]);\r\n\r\n  const handleFileInputChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const files = event.target.files;\r\n    if (files && files[0]) {\r\n      setAudioFile(files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" accept=\"audio/*\" onChange={handleFileInputChange} />\r\n      {frequencyData.map(([time, ...data], index) => (\r\n        <div style={{color:'white',fontSize:'18px'}} key={index}>\r\n          <div>{time}</div>\r\n          <div>{data.slice(0,14).join(\", \")}</div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MusicConverterPage;\r\n"],"names":["audioFile","setAudioFile","useState","frequencyData","setFrequencyData","useEffect","fileReader","FileReader","onload","AudioContext","decodeAudioData","result","then","audioBuffer","ctx","OfflineAudioContext","numberOfChannels","length","sampleRate","source","createBufferSource","buffer","analyser","createAnalyser","fftSize","connect","destination","start","startRendering","Promise","resolve","reject","oncomplete","event","renderedBuffer","i","duration","time","data","Uint8Array","frequencyBinCount","getByteFrequencyData","console","log","push","getFrequencies","readAsArrayBuffer","type","accept","onChange","files","target","map","index","style","color","fontSize","key","slice","join"],"sourceRoot":""}